//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


params {
    help = false
    version = false
    fastq = null
    ubam = null
    ref_host = null
    ref_helper = null
    ref_rep_cap = null
    ref_transgene_plasmid = null
    transgene_annotation = null

    out_dir = "output"
    sample = null
    sample_sheet = null
    aws_image_prefix = null
    aws_queue = null
    disable_ping = false
    analyse_unclassified = false
    basecaller_cfg = "dna_r10.4.1_e8.2_400bps_sup@v3.5.2"
    clair3_model_path = null

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wf'

    // This is for finding signal positive reads
    //sequencing_summary: null
    mapping_threads = 6
    threads = 4 // for ingress.nf

    wf {
        fastcat_stats = true
        example_cmd = [
            "--sample_info test_data/samples.csv",
            "--fastq test_data/barcode02"
        ]
        container_sha = "mr281_shaf751189d2f839c647b33012d168878dbc3eb6896"
        common_sha = "sha5fc720674a26bc63a6f31ed186344209175b54b1"
        e2l_snp_tag = "sha0d7e7e8e8207d9d23fdf50a34ceb577da364373e"
        agent = null
    }
}

manifest {
    name            = 'epi2me-labs/wf-aav-qc'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-aav-qc'
    description     = 'AAV plasmid quality control workflow'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.2'
    version         = 'v0.0.1'
}

executor {
    $local {
        cpus = 6
        memory = "16 GB"
    }
}


// used by default for "standard" (docker) and singularity profiles,
// other profiles may override.
process {
    withLabel:wf_aav {
        container = "ontresearch/wf-aav-qc:${params.wf.container_sha}"
    }
    withLabel:wf_common {
		container = "ontresearch/wf-common:${params.wf.common_sha}"
	}
	 withLabel:clair3 {
        container = "ontresearch/wf-human-variation-snp:${params.wf.e2l_snp_tag}"
    }
    shell = ['/bin/bash', '-euo', 'pipefail']
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }


    // keep stub conda profile to prevent unknown profile warning so users get a better error
    conda {
        conda.enabled = true
    }

    // Using AWS batch.
    // May need to set aws.region and aws.batch.cliPath
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:wfaav {
                container = "${params.aws_image_prefix}-wf-aav-qc:${params.wf.container_sha}-root"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}


timeline {
  enabled = true
  overwrite = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.out_dir}/execution/trace.txt"
}

env {
    PYTHONNOUSERSITE = 1
}
