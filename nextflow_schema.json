{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/./master/nextflow_schema.json",
    "title": "epi2me-labs/wf-aav-qc",
    "description": "Nextflow workflow for AAV vector quality control.",
    "demo_url": "https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-aav-qc/wf-aav-qc-demo.tar.gz",
    "aws_demo_url": "https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-aav-qc/wf-aav-qc-demo/aws.nextflow.config",
    "url": "https://github.com/epi2me-labs/wf-aav-qc",
    "type": "object",
    "definitions": {
        "input": {
            "title": "Input Options",
            "type": "object",
            "fa_icon": "fas fa-arrow-right",
            "description": "Parameters for finding and handling input data for analysis.",
            "properties": {
                "bam": {
                    "title": "BAM input",
                    "type": "string",
                    "format": "file-path",
                    "description": "An unaligned bam file containing reads from a AAV QC sequencing run.",
                    "help_text": "This accepts one of three cases: (i) the path to a single BAM file; (ii) the path to a top-level directory containing BAM files; (iii) the path to a directory containing one level of sub-directories which in turn contain BAM files. In the first and second case, a sample name can be supplied with `--sample`. In the last case, the data is assumed to be multiplexed with the names of the sub-directories as barcodes. In this case, a sample sheet can be provided with `--sample_sheet`."
                },
                "fastq": {
                    "title": "FASTQ input",
                    "type": "string",
                    "format": "path",
                    "description": "FASTQ files containing reads from a AAV QC sequencing run.",
                    "help_text": "This accepts one of three cases: (i) the path to a single FASTQ file; (ii) the path to a top-level directory containing FASTQ files; (iii) the path to a directory containing one level of sub-directories which in turn contain FASTQ files. In the first and second case, a sample name can be supplied with `--sample`. In the last case, the data is assumed to be multiplexed with the names of the sub-directories as barcodes. In this case, a sample sheet can be provided with `--sample_sheet`."
                },
                "itr_fl_threshold": {
                    "title": "ITR full length threshold",
                    "type": "integer",
                    "description": "The maximum number of bases missing from an ITR in order for it to be classed as a full length ITR.",
                    "help_text": "In the case of ITR1, this many bases are can be missing from the end of the ITR region. In the case of ITR2, this many bases can be missing from the start of the ITR region.",
                    "default": 100
                },
                "itr_backbone_threshold": {
                    "title": "ITR backbone threshold",
                    "type": "integer",
                    "description": "The maximum number of extra bases allowed at the ITR-ITR region termini for a read to not be classed as `backbone`.",
                    "help_text": "Reads mapping to the transgene plasmid sometimes extend beyond the ITRs. This parameter sets a maximum number or bases after which the read is classified as `backbone`.",
                    "default": 20
                },
                "itr1_start": {
                    "title": "ITR1 start",
                    "type": "integer",
                    "description": "The start position of ITR1`.",
                    "help_text": ""
                },
                "itr1_end": {
                    "title": "ITR1 end",
                    "type": "integer",
                    "description": "The end position of ITR2`.",
                    "help_text": ""
                },
                "itr2_start": {
                    "title": "ITR2 start",
                    "type": "integer",
                    "description": "The start position of ITR2`.",
                    "help_text": ""
                },
                "itr2_end": {
                    "title": "ITR2 end",
                    "type": "integer",
                    "description": "The end position of ITR2`.",
                    "help_text": ""
                },
                "symmetry_threshold": {
                    "title": "Alignment symmetry threshold",
                    "type": "integer",
                    "description": "The threshold to consider whether the start or end positions on opposite strands are classed as symmetrical or asymmetrical.",
                    "help_text": "For certain categories of AAV genome type we want to test whether alignments on both strands are symmetrical or asymmetrical; whether the start and end position are approximately the same or not. This parameter sets the threshold for that comparison.",
                    "default": 10
                },
                "ref_host": {
                    "title": "Host reference",
                    "type": "string",
                    "format": "file-path",
                    "Description": "The reference fasta file for the host organism (fasta/fasta.gz)."
                },
                "ref_helper": {
                    "title": "Helper plasmid",
                    "type": "string",
                    "format": "file-path",
                    "Description": "The helper plasmid fasta file."
                },
                "ref_rep_cap": {
                    "title": "Rep/cap plasmid",
                    "type": "string",
                    "format": "file-path",
                    "Description": "The rep/cap plasmid fasta file."
                },
                "ref_transgene_plasmid": {
                    "title": "Transgene plasmid",
                    "type": "string",
                    "format": "file-path",
                    "Description": "The transgene plasmid fasta file."
                },
                "analyse_unclassified": {
                    "type": "boolean",
                    "default": false,
                    "description": "Analyse unclassified reads from input directory. By default the workflow will not process reads in the unclassified directory.",
                    "help_text": "If selected and if the input is a multiplex directory the workflow will also process the unclassified directory."
                },
                "basecaller_cfg": {
                    "type": "string",
                    "default": "dna_r10.4.1_e8.2_400bps_sup@v3.5.2",
                    "title": "Basecaller configuration",
                    "description": "Name of the basecaller model that processed the signal data; used to select an appropriate Medaka model.",
                    "help_text": "The basecaller configuration is used to automatically select the appropriate Medaka model. The automatic selection can be overridden with the 'medaka_model' parameters. Available models are: 'dna_r10.4.1_e8.2_400bps_hac@v3.5.2', 'dna_r10.4.1_e8.2_400bps_sup@v3.5.2', 'dna_r9.4.1_e8_fast@v3.4', 'dna_r9.4.1_e8_hac@v3.3', 'dna_r9.4.1_e8_sup@v3.3', 'dna_r10.4.1_e8.2_400bps_hac_prom', 'dna_r9.4.1_450bps_hac_prom', 'dna_r10.3_450bps_hac', 'dna_r10.3_450bps_hac_prom', 'dna_r10.4.1_e8.2_260bps_hac', 'dna_r10.4.1_e8.2_260bps_hac_prom', 'dna_r10.4.1_e8.2_400bps_hac', 'dna_r9.4.1_450bps_hac', 'dna_r9.4.1_e8.1_hac', 'dna_r9.4.1_e8.1_hac_prom'.",
                    "enum": [
                        "dna_r10.4.1_e8.2_400bps_hac@v4.2.0",
                        "dna_r10.4.1_e8.2_400bps_sup@v4.2.0",
                        "dna_r10.4.1_e8.2_260bps_hac@v4.1.0",
                        "dna_r10.4.1_e8.2_260bps_sup@v4.1.0",
                        "dna_r10.4.1_e8.2_400bps_hac@v4.1.0",
                        "dna_r10.4.1_e8.2_400bps_sup@v4.1.0",
                        "dna_r10.4.1_e8.2_400bps_hac@v3.5.2",
                        "dna_r10.4.1_e8.2_400bps_sup@v3.5.2",
                        "dna_r9.4.1_e8_fast@v3.4",
                        "dna_r9.4.1_e8_hac@v3.3",
                        "dna_r9.4.1_e8_sup@v3.3",
                        "dna_r10.4.1_e8.2_400bps_hac_prom",
                        "dna_r9.4.1_450bps_hac_prom",
                        "dna_r10.3_450bps_hac",
                        "dna_r10.3_450bps_hac_prom",
                        "dna_r10.4.1_e8.2_260bps_hac",
                        "dna_r10.4.1_e8.2_260bps_hac_prom",
                        "dna_r10.4.1_e8.2_400bps_hac",
                        "dna_r9.4.1_450bps_hac",
                        "dna_r9.4.1_e8.1_hac",
                        "dna_r9.4.1_e8.1_hac_prom"
                    ]
                },
                "medaka_model": {
                    "type": "string",
                    "description": "The name of the Medaka model to use. This will override the model automatically chosen based on the provided basecaller configuration.",
                    "help_text": "The workflow will attempt to map the basecaller model (provided with 'basecaller_cfg') used to a suitable Medaka model. You can override this by providing a model with this option instead."
                }
            },
            "allOf": [
                {
                    "required": [
                        "ref_host",
                        "ref_helper",
                        "ref_rep_cap",
                        "ref_transgene_plasmid",
                        "itr1_start",
                        "itr1_end",
                        "itr2_start",
                        "itr2_end"
                    ]
                },
                {
                    "oneOf": [
                        {
                            "required": [
                                "fastq"
                            ]
                        },
                        {
                            "required": [
                                "bam"
                            ]
                        }
                    ]
                },
                {
                    "oneOf": [
                        {
                            "required": [
                                "basecaller_cfg"
                            ]
                        },
                        {
                            "required": [
                                "medaka_model"
                            ]
                        }
                    ]
                }
            ]
        },
        "samples": {
            "title": "Sample Options",
            "type": "object",
            "fa_icon": "fas fa-vials",
            "description": "Parameters that relate to samples such as sample sheets and sample names.",
            "properties": {
                "sample_sheet": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A CSV file used to map barcodes to sample aliases. The sample sheet can be provided when the input data is a directory containing sub-directories with FASTQ files.",
                    "help_text": "The sample sheet is a CSV file with, minimally, columns named `barcode` and `alias`. Extra columns are allowed. A `type` column is required for certain workflows and should have the following values; `test_sample`, `positive_control`, `negative_control`, `no_template_control`."
                },
                "sample": {
                    "type": "string",
                    "description": "A single sample name for non-multiplexed data. Permissible if passing a single .fastq(.gz) file or directory of .fastq(.gz) files."
                }
            }
        },
        "output": {
            "title": "Output Options",
            "type": "object",
            "fa_icon": "fas fa-arrow-left",
            "description": "Parameters for saving and naming workflow outputs.",
            "properties": {
                "out_dir": {
                    "type": "string",
                    "default": "output",
                    "format": "directory-path",
                    "description": "Directory for output of all workflow results."
                }
            }
        },
        "advanced_options": {
            "title": "Advanced Options",
            "type": "object",
            "fa_icon": "far fa-question-circle",
            "description": "Advanced options for configuring processes inside the workflow.",
            "help_text": "These advanced options do not need to be changed for typical use, but allow fine tuning of workflows for users who want more control over the workflow.",
            "properties": {}
        },
        "misc": {
            "title": "Miscellaneous Options",
            "type": "object",
            "description": "Everything else.",
            "default": "",
            "properties": {
                "threads": {
                    "type": "integer",
                    "default": 4,
                    "description": "Maximum number of CPU threads for a process to consume. Applies to the minimap2 mapping and the AAV structure determination stages.",
                    "help_text": "A minimap2 and AAV structure determination process per sample will be will be run. This setting applies a maximum number of threads to be used for each of these."
                },
                "mm2_memory": {
                    "type": "string",
                    "title": "minimap2_memory",
                    "default": "16 GB",
                    "description": "The amount of memory to give to the minimap2 read mapping stage",
                    "help": "This can normally be be left at the default 16 GB."
                },
                "disable_ping": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable to prevent sending a workflow ping."
                },
                "help": {
                    "type": "boolean",
                    "default": false,
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "default": false,
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input"
        },
        {
            "$ref": "#/definitions/samples"
        },
        {
            "$ref": "#/definitions/output"
        },
        {
            "$ref": "#/definitions/advanced_options"
        },
        {
            "$ref": "#/definitions/misc"
        }
    ],
    "properties": {
        "aws_image_prefix": {
            "type": "string",
            "hidden": true
        },
        "aws_queue": {
            "type": "string",
            "hidden": true
        },
        "monochrome_logs": {
            "type": "boolean"
        },
        "validate_params": {
            "type": "boolean",
            "default": true
        },
        "show_hidden_params": {
            "type": "boolean"
        }
    },
    "docs": {
        "intro": "## Introduction\n\nThis is a quality control workflow for recombinant adeno-associated virus (rAAV) preps.\nIt provides information about the status of plasmid preparations including; contamination \nlevels, integrity of individual AAV genomes, and unwanted sequence variation that may be present within the vectors.\n\nThe transgene plasmid ITR cassettes will naturally exist in one of four orientations \nTo account for this, the variable regions of the supplied transgene plasmid are identified, masked and added to a \ncombined reference containing the helper and Rep-Cap plasmid sequences and the host cell reference.\n\nReads are mapped to the combined reference using [minimap2](https://github.com/lh3/minimap2) and alignment \nstatistics are then generated using [seqkit](https://bioinf.shenwei.me/seqkit/), \nwhich are used in the rest of the workflow to generate QC plots and tables.\n\nFinally, transgene plasmid consensus sequences are generated using [medaka](https://github.com/nanoporetech/medaka) allowing genome integrity to be checked.\n",
        "links": "## Useful links\n\n* [nextflow](https://www.nextflow.io/)\n* [docker](https://www.docker.com/products/docker-desktop)\n* [singularity](https://docs.sylabs.io/guides/latest/user-guide/)\n"
    }
}